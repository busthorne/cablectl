// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	TokenHeaderScopes = "tokenHeader.Scopes"
	TokenParamScopes  = "tokenParam.Scopes"
)

// ApiInfo Information about the api
type ApiInfo struct {
	GatewayVersion *string `json:"gateway_version,omitempty"`
	Version        *string `json:"version,omitempty"`
}

// Error An error response from the server
type Error struct {
	// Message The message logged when the error occurred
	Message *string `json:"message,omitempty"`

	// Reason The reason for the failure
	Reason *string `json:"reason,omitempty"`
}

// Kernel Kernel information
type Kernel struct {
	// Connections The number of active connections to this kernel.
	Connections *float32 `json:"connections,omitempty"`

	// ExecutionState Current execution state of the kernel (typically 'idle' or 'busy', but may be other values, such as 'starting').
	// Added in notebook server 5.0.
	ExecutionState *string `json:"execution_state,omitempty"`

	// Id uuid of kernel
	Id openapi_types.UUID `json:"id"`

	// LastActivity ISO 8601 timestamp for the last-seen activity on this kernel.
	// Use this in combination with execution_state == 'idle' to identify
	// which kernels have been idle since a given time.
	// Timestamps will be UTC, indicated 'Z' suffix.
	// Added in notebook server 5.0.
	LastActivity *string `json:"last_activity,omitempty"`

	// Name kernel spec name
	Name string `json:"name"`
}

// KernelSpec Kernel spec (contents of kernel.json)
type KernelSpec struct {
	// KernelSpecFile Kernel spec json file
	KernelSpecFile *KernelSpecFile `json:"KernelSpecFile,omitempty"`

	// Name Unique name for kernel
	Name      *string `json:"name,omitempty"`
	Resources *struct {
		// KernelCss path for kernel.css file
		KernelCss *string `json:"kernel.css,omitempty"`

		// KernelJs path for kernel.js file
		KernelJs *string `json:"kernel.js,omitempty"`

		// Logo path for logo file.  Logo filenames are of the form `logo-widthxheight`
		Logo *string `json:"logo-*,omitempty"`
	} `json:"resources,omitempty"`
}

// KernelSpecFile Kernel spec json file
type KernelSpecFile struct {
	// Argv A list of command line arguments used to start the kernel. The text `{connection_file}` in any
	// argument will be replaced with the path to the connection file.
	Argv []string `json:"argv"`

	// CodemirrorMode Codemirror mode.  Can be a string *or* an valid Codemirror mode object.  This defaults to the
	// string from the `language` property.
	CodemirrorMode *string `json:"codemirror_mode,omitempty"`

	// DisplayName The kernel's name as it should be displayed in the UI. Unlike the kernel name used in the API,
	// this can contain arbitrary unicode characters.
	DisplayName string `json:"display_name"`

	// Env A dictionary of environment variables to set for the kernel. These will be added to the current
	// environment variables.
	Env *map[string]string `json:"env,omitempty"`

	// HelpLinks Help items to be displayed in the help menu in the notebook UI.
	HelpLinks *[]struct {
		// Text menu item link text
		Text string `json:"text"`

		// Url menu item link url
		Url string `json:"url"`
	} `json:"help_links,omitempty"`

	// Language The programming language which this kernel runs. This will be stored in notebook metadata.
	Language string `json:"language"`

	// Metadata A free-form dictionary consisting of additional information about the kernel and its environment.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Session A session
type Session struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Kernel Kernel information
	Kernel *Kernel `json:"kernel,omitempty"`

	// Name name of the session
	Name *string `json:"name,omitempty"`

	// Path path to the session
	Path *string `json:"path,omitempty"`

	// Type session type
	Type *string `json:"type,omitempty"`
}

// PostApiKernelsJSONBody defines parameters for PostApiKernels.
type PostApiKernelsJSONBody struct {
	// Env A dictionary of environment variables and values to include in the
	// kernel process - subject to filtering.
	Env *map[string]string `json:"env,omitempty"`

	// Name Kernel spec name (defaults to default kernel spec for server)
	Name *string `json:"name,omitempty"`
}

// GetApiKernelspecsParams defines parameters for GetApiKernelspecs.
type GetApiKernelspecsParams struct {
	// User When present, kernelspec results will be filtered based on the configured authorization of specified value.
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// PostApiKernelsJSONRequestBody defines body for PostApiKernels for application/json ContentType.
type PostApiKernelsJSONRequestBody PostApiKernelsJSONBody

// PostApiSessionsJSONRequestBody defines body for PostApiSessions for application/json ContentType.
type PostApiSessionsJSONRequestBody = Session

// PatchApiSessionsSessionJSONRequestBody defines body for PatchApiSessionsSession for application/json ContentType.
type PatchApiSessionsSessionJSONRequestBody = Session

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApi request
	GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKernels request
	GetApiKernels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKernelsWithBody request with any body
	PostApiKernelsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKernels(ctx context.Context, body PostApiKernelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKernelsKernelId request
	DeleteApiKernelsKernelId(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKernelsKernelId request
	GetApiKernelsKernelId(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKernelsKernelIdChannels request
	GetApiKernelsKernelIdChannels(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKernelspecs request
	GetApiKernelspecs(ctx context.Context, params *GetApiKernelspecsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSessions request
	GetApiSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSessionsWithBody request with any body
	PostApiSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSessions(ctx context.Context, body PostApiSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiSessionsSession request
	DeleteApiSessionsSession(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSessionsSession request
	GetApiSessionsSession(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiSessionsSessionWithBody request with any body
	PatchApiSessionsSessionWithBody(ctx context.Context, session openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiSessionsSession(ctx context.Context, session openapi_types.UUID, body PatchApiSessionsSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSwaggerJson request
	GetApiSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSwaggerYaml request
	GetApiSwaggerYaml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKernelsKernelIdInterrupt request
	PostKernelsKernelIdInterrupt(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKernelsKernelIdRestart request
	PostKernelsKernelIdRestart(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKernels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKernelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKernelsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKernelsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKernels(ctx context.Context, body PostApiKernelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKernelsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKernelsKernelId(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKernelsKernelIdRequest(c.Server, kernelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKernelsKernelId(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKernelsKernelIdRequest(c.Server, kernelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKernelsKernelIdChannels(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKernelsKernelIdChannelsRequest(c.Server, kernelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKernelspecs(ctx context.Context, params *GetApiKernelspecsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKernelspecsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSessions(ctx context.Context, body PostApiSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiSessionsSession(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiSessionsSessionRequest(c.Server, session)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSessionsSession(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSessionsSessionRequest(c.Server, session)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiSessionsSessionWithBody(ctx context.Context, session openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiSessionsSessionRequestWithBody(c.Server, session, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiSessionsSession(ctx context.Context, session openapi_types.UUID, body PatchApiSessionsSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiSessionsSessionRequest(c.Server, session, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSwaggerYaml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSwaggerYamlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKernelsKernelIdInterrupt(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKernelsKernelIdInterruptRequest(c.Server, kernelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKernelsKernelIdRestart(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKernelsKernelIdRestartRequest(c.Server, kernelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiRequest generates requests for GetApi
func NewGetApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKernelsRequest generates requests for GetApiKernels
func NewGetApiKernelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/kernels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiKernelsRequest calls the generic PostApiKernels builder with application/json body
func NewPostApiKernelsRequest(server string, body PostApiKernelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKernelsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiKernelsRequestWithBody generates requests for PostApiKernels with any type of body
func NewPostApiKernelsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/kernels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKernelsKernelIdRequest generates requests for DeleteApiKernelsKernelId
func NewDeleteApiKernelsKernelIdRequest(server string, kernelId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kernel_id", runtime.ParamLocationPath, kernelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/kernels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKernelsKernelIdRequest generates requests for GetApiKernelsKernelId
func NewGetApiKernelsKernelIdRequest(server string, kernelId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kernel_id", runtime.ParamLocationPath, kernelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/kernels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKernelsKernelIdChannelsRequest generates requests for GetApiKernelsKernelIdChannels
func NewGetApiKernelsKernelIdChannelsRequest(server string, kernelId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kernel_id", runtime.ParamLocationPath, kernelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/kernels/%s/channels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKernelspecsRequest generates requests for GetApiKernelspecs
func NewGetApiKernelspecsRequest(server string, params *GetApiKernelspecsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/kernelspecs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSessionsRequest generates requests for GetApiSessions
func NewGetApiSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSessionsRequest calls the generic PostApiSessions builder with application/json body
func NewPostApiSessionsRequest(server string, body PostApiSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiSessionsRequestWithBody generates requests for PostApiSessions with any type of body
func NewPostApiSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiSessionsSessionRequest generates requests for DeleteApiSessionsSession
func NewDeleteApiSessionsSessionRequest(server string, session openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session", runtime.ParamLocationPath, session)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSessionsSessionRequest generates requests for GetApiSessionsSession
func NewGetApiSessionsSessionRequest(server string, session openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session", runtime.ParamLocationPath, session)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiSessionsSessionRequest calls the generic PatchApiSessionsSession builder with application/json body
func NewPatchApiSessionsSessionRequest(server string, session openapi_types.UUID, body PatchApiSessionsSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiSessionsSessionRequestWithBody(server, session, "application/json", bodyReader)
}

// NewPatchApiSessionsSessionRequestWithBody generates requests for PatchApiSessionsSession with any type of body
func NewPatchApiSessionsSessionRequestWithBody(server string, session openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session", runtime.ParamLocationPath, session)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSwaggerJsonRequest generates requests for GetApiSwaggerJson
func NewGetApiSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSwaggerYamlRequest generates requests for GetApiSwaggerYaml
func NewGetApiSwaggerYamlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swagger.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKernelsKernelIdInterruptRequest generates requests for PostKernelsKernelIdInterrupt
func NewPostKernelsKernelIdInterruptRequest(server string, kernelId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kernel_id", runtime.ParamLocationPath, kernelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kernels/%s/interrupt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKernelsKernelIdRestartRequest generates requests for PostKernelsKernelIdRestart
func NewPostKernelsKernelIdRestartRequest(server string, kernelId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kernel_id", runtime.ParamLocationPath, kernelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kernels/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiWithResponse request
	GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error)

	// GetApiKernelsWithResponse request
	GetApiKernelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKernelsResponse, error)

	// PostApiKernelsWithBodyWithResponse request with any body
	PostApiKernelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKernelsResponse, error)

	PostApiKernelsWithResponse(ctx context.Context, body PostApiKernelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKernelsResponse, error)

	// DeleteApiKernelsKernelIdWithResponse request
	DeleteApiKernelsKernelIdWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiKernelsKernelIdResponse, error)

	// GetApiKernelsKernelIdWithResponse request
	GetApiKernelsKernelIdWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKernelsKernelIdResponse, error)

	// GetApiKernelsKernelIdChannelsWithResponse request
	GetApiKernelsKernelIdChannelsWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKernelsKernelIdChannelsResponse, error)

	// GetApiKernelspecsWithResponse request
	GetApiKernelspecsWithResponse(ctx context.Context, params *GetApiKernelspecsParams, reqEditors ...RequestEditorFn) (*GetApiKernelspecsResponse, error)

	// GetApiSessionsWithResponse request
	GetApiSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSessionsResponse, error)

	// PostApiSessionsWithBodyWithResponse request with any body
	PostApiSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSessionsResponse, error)

	PostApiSessionsWithResponse(ctx context.Context, body PostApiSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSessionsResponse, error)

	// DeleteApiSessionsSessionWithResponse request
	DeleteApiSessionsSessionWithResponse(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiSessionsSessionResponse, error)

	// GetApiSessionsSessionWithResponse request
	GetApiSessionsSessionWithResponse(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiSessionsSessionResponse, error)

	// PatchApiSessionsSessionWithBodyWithResponse request with any body
	PatchApiSessionsSessionWithBodyWithResponse(ctx context.Context, session openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiSessionsSessionResponse, error)

	PatchApiSessionsSessionWithResponse(ctx context.Context, session openapi_types.UUID, body PatchApiSessionsSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiSessionsSessionResponse, error)

	// GetApiSwaggerJsonWithResponse request
	GetApiSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSwaggerJsonResponse, error)

	// GetApiSwaggerYamlWithResponse request
	GetApiSwaggerYamlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSwaggerYamlResponse, error)

	// PostKernelsKernelIdInterruptWithResponse request
	PostKernelsKernelIdInterruptWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostKernelsKernelIdInterruptResponse, error)

	// PostKernelsKernelIdRestartWithResponse request
	PostKernelsKernelIdRestartWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostKernelsKernelIdRestartResponse, error)
}

type GetApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiInfo
}

// Status returns HTTPResponse.Status
func (r GetApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKernelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Kernel
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiKernelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKernelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKernelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Kernel
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiKernelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKernelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKernelsKernelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKernelsKernelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKernelsKernelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKernelsKernelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Kernel
}

// Status returns HTTPResponse.Status
func (r GetApiKernelsKernelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKernelsKernelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKernelsKernelIdChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiKernelsKernelIdChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKernelsKernelIdChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKernelspecsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Default The name of the default kernel.
		Default     *string                `json:"default,omitempty"`
		Kernelspecs *map[string]KernelSpec `json:"kernelspecs,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiKernelspecsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKernelspecsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Session
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Session
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiSessionsSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiSessionsSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiSessionsSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSessionsSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r GetApiSessionsSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSessionsSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiSessionsSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PatchApiSessionsSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiSessionsSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSwaggerYamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiSwaggerYamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSwaggerYamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKernelsKernelIdInterruptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKernelsKernelIdInterruptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKernelsKernelIdInterruptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKernelsKernelIdRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Kernel
}

// Status returns HTTPResponse.Status
func (r PostKernelsKernelIdRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKernelsKernelIdRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiWithResponse request returning *GetApiResponse
func (c *ClientWithResponses) GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error) {
	rsp, err := c.GetApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResponse(rsp)
}

// GetApiKernelsWithResponse request returning *GetApiKernelsResponse
func (c *ClientWithResponses) GetApiKernelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKernelsResponse, error) {
	rsp, err := c.GetApiKernels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKernelsResponse(rsp)
}

// PostApiKernelsWithBodyWithResponse request with arbitrary body returning *PostApiKernelsResponse
func (c *ClientWithResponses) PostApiKernelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKernelsResponse, error) {
	rsp, err := c.PostApiKernelsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKernelsResponse(rsp)
}

func (c *ClientWithResponses) PostApiKernelsWithResponse(ctx context.Context, body PostApiKernelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKernelsResponse, error) {
	rsp, err := c.PostApiKernels(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKernelsResponse(rsp)
}

// DeleteApiKernelsKernelIdWithResponse request returning *DeleteApiKernelsKernelIdResponse
func (c *ClientWithResponses) DeleteApiKernelsKernelIdWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiKernelsKernelIdResponse, error) {
	rsp, err := c.DeleteApiKernelsKernelId(ctx, kernelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKernelsKernelIdResponse(rsp)
}

// GetApiKernelsKernelIdWithResponse request returning *GetApiKernelsKernelIdResponse
func (c *ClientWithResponses) GetApiKernelsKernelIdWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKernelsKernelIdResponse, error) {
	rsp, err := c.GetApiKernelsKernelId(ctx, kernelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKernelsKernelIdResponse(rsp)
}

// GetApiKernelsKernelIdChannelsWithResponse request returning *GetApiKernelsKernelIdChannelsResponse
func (c *ClientWithResponses) GetApiKernelsKernelIdChannelsWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKernelsKernelIdChannelsResponse, error) {
	rsp, err := c.GetApiKernelsKernelIdChannels(ctx, kernelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKernelsKernelIdChannelsResponse(rsp)
}

// GetApiKernelspecsWithResponse request returning *GetApiKernelspecsResponse
func (c *ClientWithResponses) GetApiKernelspecsWithResponse(ctx context.Context, params *GetApiKernelspecsParams, reqEditors ...RequestEditorFn) (*GetApiKernelspecsResponse, error) {
	rsp, err := c.GetApiKernelspecs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKernelspecsResponse(rsp)
}

// GetApiSessionsWithResponse request returning *GetApiSessionsResponse
func (c *ClientWithResponses) GetApiSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSessionsResponse, error) {
	rsp, err := c.GetApiSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSessionsResponse(rsp)
}

// PostApiSessionsWithBodyWithResponse request with arbitrary body returning *PostApiSessionsResponse
func (c *ClientWithResponses) PostApiSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSessionsResponse, error) {
	rsp, err := c.PostApiSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiSessionsWithResponse(ctx context.Context, body PostApiSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSessionsResponse, error) {
	rsp, err := c.PostApiSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSessionsResponse(rsp)
}

// DeleteApiSessionsSessionWithResponse request returning *DeleteApiSessionsSessionResponse
func (c *ClientWithResponses) DeleteApiSessionsSessionWithResponse(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiSessionsSessionResponse, error) {
	rsp, err := c.DeleteApiSessionsSession(ctx, session, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiSessionsSessionResponse(rsp)
}

// GetApiSessionsSessionWithResponse request returning *GetApiSessionsSessionResponse
func (c *ClientWithResponses) GetApiSessionsSessionWithResponse(ctx context.Context, session openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiSessionsSessionResponse, error) {
	rsp, err := c.GetApiSessionsSession(ctx, session, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSessionsSessionResponse(rsp)
}

// PatchApiSessionsSessionWithBodyWithResponse request with arbitrary body returning *PatchApiSessionsSessionResponse
func (c *ClientWithResponses) PatchApiSessionsSessionWithBodyWithResponse(ctx context.Context, session openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiSessionsSessionResponse, error) {
	rsp, err := c.PatchApiSessionsSessionWithBody(ctx, session, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiSessionsSessionResponse(rsp)
}

func (c *ClientWithResponses) PatchApiSessionsSessionWithResponse(ctx context.Context, session openapi_types.UUID, body PatchApiSessionsSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiSessionsSessionResponse, error) {
	rsp, err := c.PatchApiSessionsSession(ctx, session, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiSessionsSessionResponse(rsp)
}

// GetApiSwaggerJsonWithResponse request returning *GetApiSwaggerJsonResponse
func (c *ClientWithResponses) GetApiSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSwaggerJsonResponse, error) {
	rsp, err := c.GetApiSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSwaggerJsonResponse(rsp)
}

// GetApiSwaggerYamlWithResponse request returning *GetApiSwaggerYamlResponse
func (c *ClientWithResponses) GetApiSwaggerYamlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSwaggerYamlResponse, error) {
	rsp, err := c.GetApiSwaggerYaml(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSwaggerYamlResponse(rsp)
}

// PostKernelsKernelIdInterruptWithResponse request returning *PostKernelsKernelIdInterruptResponse
func (c *ClientWithResponses) PostKernelsKernelIdInterruptWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostKernelsKernelIdInterruptResponse, error) {
	rsp, err := c.PostKernelsKernelIdInterrupt(ctx, kernelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKernelsKernelIdInterruptResponse(rsp)
}

// PostKernelsKernelIdRestartWithResponse request returning *PostKernelsKernelIdRestartResponse
func (c *ClientWithResponses) PostKernelsKernelIdRestartWithResponse(ctx context.Context, kernelId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostKernelsKernelIdRestartResponse, error) {
	rsp, err := c.PostKernelsKernelIdRestart(ctx, kernelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKernelsKernelIdRestartResponse(rsp)
}

// ParseGetApiResponse parses an HTTP response from a GetApiWithResponse call
func ParseGetApiResponse(rsp *http.Response) (*GetApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKernelsResponse parses an HTTP response from a GetApiKernelsWithResponse call
func ParseGetApiKernelsResponse(rsp *http.Response) (*GetApiKernelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKernelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Kernel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostApiKernelsResponse parses an HTTP response from a PostApiKernelsWithResponse call
func ParsePostApiKernelsResponse(rsp *http.Response) (*PostApiKernelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKernelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Kernel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteApiKernelsKernelIdResponse parses an HTTP response from a DeleteApiKernelsKernelIdWithResponse call
func ParseDeleteApiKernelsKernelIdResponse(rsp *http.Response) (*DeleteApiKernelsKernelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKernelsKernelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKernelsKernelIdResponse parses an HTTP response from a GetApiKernelsKernelIdWithResponse call
func ParseGetApiKernelsKernelIdResponse(rsp *http.Response) (*GetApiKernelsKernelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKernelsKernelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Kernel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKernelsKernelIdChannelsResponse parses an HTTP response from a GetApiKernelsKernelIdChannelsWithResponse call
func ParseGetApiKernelsKernelIdChannelsResponse(rsp *http.Response) (*GetApiKernelsKernelIdChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKernelsKernelIdChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKernelspecsResponse parses an HTTP response from a GetApiKernelspecsWithResponse call
func ParseGetApiKernelspecsResponse(rsp *http.Response) (*GetApiKernelspecsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKernelspecsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Default The name of the default kernel.
			Default     *string                `json:"default,omitempty"`
			Kernelspecs *map[string]KernelSpec `json:"kernelspecs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSessionsResponse parses an HTTP response from a GetApiSessionsWithResponse call
func ParseGetApiSessionsResponse(rsp *http.Response) (*GetApiSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostApiSessionsResponse parses an HTTP response from a PostApiSessionsWithResponse call
func ParsePostApiSessionsResponse(rsp *http.Response) (*PostApiSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteApiSessionsSessionResponse parses an HTTP response from a DeleteApiSessionsSessionWithResponse call
func ParseDeleteApiSessionsSessionResponse(rsp *http.Response) (*DeleteApiSessionsSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiSessionsSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSessionsSessionResponse parses an HTTP response from a GetApiSessionsSessionWithResponse call
func ParseGetApiSessionsSessionResponse(rsp *http.Response) (*GetApiSessionsSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSessionsSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiSessionsSessionResponse parses an HTTP response from a PatchApiSessionsSessionWithResponse call
func ParsePatchApiSessionsSessionResponse(rsp *http.Response) (*PatchApiSessionsSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiSessionsSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApiSwaggerJsonResponse parses an HTTP response from a GetApiSwaggerJsonWithResponse call
func ParseGetApiSwaggerJsonResponse(rsp *http.Response) (*GetApiSwaggerJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSwaggerYamlResponse parses an HTTP response from a GetApiSwaggerYamlWithResponse call
func ParseGetApiSwaggerYamlResponse(rsp *http.Response) (*GetApiSwaggerYamlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSwaggerYamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKernelsKernelIdInterruptResponse parses an HTTP response from a PostKernelsKernelIdInterruptWithResponse call
func ParsePostKernelsKernelIdInterruptResponse(rsp *http.Response) (*PostKernelsKernelIdInterruptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKernelsKernelIdInterruptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKernelsKernelIdRestartResponse parses an HTTP response from a PostKernelsKernelIdRestartWithResponse call
func ParsePostKernelsKernelIdRestartResponse(rsp *http.Response) (*PostKernelsKernelIdRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKernelsKernelIdRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Kernel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
